import { O as Ollama$1, C as CreateRequest, A as AbortableAsyncIterator, P as ProgressResponse } from './shared/ollama.6680e40f.js';
export { c as ChatRequest, h as ChatResponse, a as Config, f as CopyRequest, D as DeleteRequest, E as EmbeddingsRequest, i as EmbeddingsResponse, m as ErrorResponse, F as Fetch, G as GenerateRequest, g as GenerateResponse, L as ListResponse, M as Message, k as ModelDetails, j as ModelResponse, b as Options, d as PullRequest, e as PushRequest, S as ShowRequest, l as ShowResponse, n as StatusResponse } from './shared/ollama.6680e40f.js';

declare class Ollama extends Ollama$1 {
    encodeImage(image: Uint8Array | Buffer | string): Promise<string>;
    /**
     * Parse the modelfile and replace the FROM and ADAPTER commands with the corresponding blob hashes.
     * @param modelfile {string} - The modelfile content
     * @param mfDir {string} - The directory of the modelfile
     * @private @internal
     */
    private parseModelfile;
    /**
     * Resolve the path to an absolute path.
     * @param inputPath {string} - The input path
     * @param mfDir {string} - The directory of the modelfile
     * @private @internal
     */
    private resolvePath;
    /**
     * checks if a file exists
     * @param path {string} - The path to the file
     * @private @internal
     * @returns {Promise<boolean>} - Whether the file exists or not
     */
    private fileExists;
    private createBlob;
    create(request: CreateRequest & {
        stream: true;
    }): Promise<AbortableAsyncIterator<ProgressResponse>>;
    create(request: CreateRequest & {
        stream?: false;
    }): Promise<ProgressResponse>;
}
declare const _default: Ollama;

export { CreateRequest, Ollama, ProgressResponse, _default as default };
